$duelystBlue: #016CB1;
$duelystWhite: #FBFCFE;

.loading-screen {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.75);
  z-index: 100;
}
.loading-animation {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
  text-align: center;

  img {
    display: inline-block;
    transform: scale(3);
    image-rendering: optimizeSpeed;
    image-rendering: -moz-crisp-edges;
    image-rendering: -o-crisp-edges;
    image-rendering: -webkit-optimize-contrast;
    image-rendering: pixelated;
    image-rendering: optimize-contrast;
  -ms-interpolation-mode: nearest-neighborz;
  }

  .loading-text {
    color: $duelystWhite;
  }
}

.card-patches {
  margin: 0 -0.5rem;

  &:after {
    content: "";
    display: table;
    clear: both;
  }
}
.card-patch {
  width: 33%;
  display: inline-block;
  vertical-align: top;
  padding: 0 0.5rem;
  float: left;
}

.filter-filter-wrapper,
.sort-filter-wrapper {
  display: inline-block;
  height: 3em;
  text-transform: uppercase;
  font-family: 'Lato', sans-serif;
  font-weight: normal;
  border-radius: 2em;
  border: 2px solid $duelystBlue;
  position: relative;
  margin: 1em 1em 0 0;
  transition: all 150ms;

  label {
    line-height: 2.8; // Magic number to center text
    color: $duelystBlue;
    cursor: pointer;
  }

  &:hover, &.selected {
    background: $duelystBlue;

    label {
      color: $duelystWhite;
    }
  }
}

.filter-filter-wrapper {
  .filter-filter-label {
    padding: 0 2.5em;
  }

  .filter-filter--checkbox {
    display: none;
  }
}

.sort-filter-wrapper {
  // Hide inputs
  .sortCards {
    display: none;
  }

  .sort-filter-label {
    padding: 0 2.5em 0 2.5em;
  }

  &.selected {
    .sort-filter-label {
      padding: 0 4em 0 1em;
    }
    .asc-desc-label {
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      width: 2.5em;
      text-transform: lowercase;
      text-align: right;
      padding-right: 1em;
      opacity: 0.5;

      &:hover {
        opacity: 1;
      }

      &::after {
        content: 'asc';
      }
    }

    [type="checkbox"]:checked + .asc-desc-label {
      &::after {
        content: 'dsc';
      }
    }
  }
}

// Set up an array containing all the possible sort options
$sortFilters: 'faction', 'rarity', 'name', 'manaCost', 'type', 'race', 'attack', 'health';

// For each, set up the necessary show/hide css
@each $sortFilter in $sortFilters {
  .card-history-container.sort-filter__show-only-#{$sortFilter} {
    .card-history:not([data-#{$sortFilter}]) {
      display: none !important;
    }
  }
  .card-history-container.sort-filter__hide-#{$sortFilter} {
    .card-history[data-#{$sortFilter}] {
      display: none !important;
    }
  }
}

// If any kind of filter is active, by default hide all the cards
.card-history-container.filter-filter {
  .card-history {
    display: none;
  }
}





// Iterate through the possible min/max manaCost values and
// health values, since they happen to be the same

// While this will result in an exhorbiant number of css selectors
// w/gzip, the file size cost is less than the usability cost of other solutions
// which involve touching DOM more times than a single class addition
// At some point, someone should run a performance test

// Loop through possible ranges and hide anything not within the inputted range
@for $iMin from 0 through 24 {
@for $iMax from 1 through 25 {
  @if $iMax > $iMin {
    .card-history-container.filter-filter__manaCost-#{$iMin}.filter-filter__manaCost-#{$iMax} {
      @for $iCurrent from 0 through 25 {
      @if $iCurrent < $iMin or $iCurrent > $iMax {
        [data-manaCost="#{$iCurrent}"] {
          display: none !important;
        }
      }
      }
    }
  }
}}
@for $iMin from 0 through 24 {
@for $iMax from 1 through 25 {
  @if $iMax > $iMin {
    .card-history-container.filter-filter__health-#{$iMin}.filter-filter__health-#{$iMax} {
      @for $iCurrent from 0 through 25 {
      @if $iCurrent < $iMin or $iCurrent > $iMax {
        [data-health="#{$iCurrent}"] {
          display: none !important;
        }
      }
      }
    }
  }
}}

// Then iterate through the possible min/max attack values the same way
@for $iMin from 0 through 12 {
@for $iMax from 1 through 11 {
  @if $iMax > $iMin {
    .card-history-container.filter-filter__attack-#{$iMin}.filter-filter__attack-#{$iMax} {
      @for $iCurrent from 0 through 25 {
      @if $iCurrent < $iMin or $iCurrent > $iMax {
        [data-manaCost="#{$iCurrent}"] {
          display: none !important;
        }
      }
      }
    }
  }
}}










// noUISlider
.noUi-horizontal {
  height: 0.5rem;
}
.noUi-connect {
  background: $duelystBlue;
}
.noUi-horizontal .noUi-handle {
  border-radius: 50%;
  width: 1rem;
  height: 1rem;
  top: -.25rem;
  left: -.5rem;
}

// Make room for the pips
.filter-filter-range-wrapper {
  margin-top: 1rem;
  padding-bottom: 50px; // Magic number based on plugin
}
